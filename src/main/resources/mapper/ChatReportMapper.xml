<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.start01.dao.ChatReportDao">


<!--    공통 컬럼-->
    <sql id="ChatReportColumns">
        id, chat_id, users_id, reason, reported_by, created_at,
        response_status, responded_at, admin_id
    </sql>
<!--    단건 조회 -->
    <select id="selectById" parameterType="int" resultType="ChatReportDto">
        SELECT <include refid="ChatReportColumns"/>
        FROM chat_report
        WHERE id = #{id}
    </select>

<!-- 신고자 기준 목록 -->
    <select id="selectByReportedBy" parameterType="int" resultType="ChatReportDto">
        SELECT <include refid="ChatReportColumns"/>
        FROM chat_report
        WHERE reported_by = #{reportedBy}
        ORDER BY created_at DESC
    </select>

<!-- 피신고자(users_id) 기준 목록 -->
    <select id="selectByUsersId" parameterType="int" resultType="ChatReportDto">
        SELECT <include refid="ChatReportColumns"/>
        FROM chat_report
        WHERE users_id = #{usersId}
        ORDER BY created_at DESC
    </select>
<!-- Select All 모든 신고 목록 -->
    <select id="selectAll" resultType="ChatReportDto">
        SELECT <include refid="ChatReportColumns"/>
        FROM chat_report
        ORDER BY created_at DESC
    </select>

<!-- 신고 insert -->
    <insert id="insert" parameterType="com.example.start01.dto.ChatReportDto"
            useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
        INSERT INTO chat_report (chat_id, users_id, reason, reported_by)
        VALUES (
        #{chatId},
        #{usersId},
        #{reason, jdbcType=VARCHAR},
        #{reportedBy}
        )
    </insert>

<!-- 신고 delete -->
    <delete id="deleteById" parameterType="int">
        DELETE FROM chat_report WHERE id = #{id}
    </delete>

<!--    상태 전환: in_progress (진행중) -->
    <update id="markInProgress" parameterType="map">
        UPDATE chat_report
            SET response_status = 'in_progress',
                responded_at    = SYSTIMESTAMP,
                admin_id        = #{adminId}
        WHERE id = #{id}
            AND response_status IN ('pending', 'in_progress') <!-- 중복 클릭 방지 -->
    </update>

<!--    상태 전환: resolved (응답완료) -->
    <update id="resolve" parameterType="map">
        UPDATE chat_report
            SET response_status = 'resolved',
                responded_at    = SYSTIMESTAMP,
                admin_id        = #{adminId}
        WHERE id = #{id}
            AND response_status IN ('pending', 'in_progress')
    </update>
<!--    상태 전환: rejected (기각) -->
    <update id="reject" parameterType="map">
        UPDATE chat_report
            SET response_status = 'rejected',
                responded_at    = SYSTIMESTAMP,
                admin_id        = #{adminId}
        WHERE id = #{id}
            AND response_status In ('pending','in_progress')
    </update>

<!--    임의 상태 업데이트: 서비스에서 값 검증하고 쓸 때 (선택) -->
    <update id="updateStatus" parameterType="map">
        UPDATE chat_report
            SET response_status = #{status},
                responded_at    = SYSTIMESTAMP,
                admin_id        = #{adminId}
        WHERE id = #{id}
    </update>
</mapper>