<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.start01.dao.OrdersDao">

    <!--    주문리스트-->
    <select id="orderList" resultType="OrdersDto">
    SELECT o.*, s.store_name, u.nickname FROM orders o
        Join store s on o.store_id = s.id Join users u on o.user_id = u.id
    </select>

<!--    전체 목록 : 로그인 id 기준 (최신순)-->
    <select id="selectByUserId" resultType="OrdersDto">
        SELECT order_id, room_id, user_id, store_id,
        room_order AS roomOrder,
        total_price, created_at
        FROM orders
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
    </select>
    <!-- 페이지네이션 -->
    <select id="selectByUserIdPaging" resultType="OrdersDto">
        SELECT *
        FROM (
            SELECT t.*, ROWNUM rnum
            FROM (
                SELECT order_id, room_id, user_id, store_id,
                    room_order AS roomOrder,
                    total_price, created_at
            FROM orders
            WHERE user_id = #{userId}
            ORDER BY created_at DESC
        ) t
        WHERE ROWNUM &lt;= #{endRow}
        )
        WHERE rnum &gt;= #{offset}
    </select>

<!--    총 갯수 쿼리. -->
    <select id="countByUserId" resultType="int">
        SELECT COUNT(*) FROM orders WHERE user_id = #{userId}
    </select>

    <!--  주문 상세  -->
    <select id="selectByOrderId" parameterType="int" resultType="OrdersDto">
        SELECT order_id, room_id, user_id,
        room_order AS roomOrder,
        total_price, created_at

        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!--    insert-->
    <insert id="insertOrder" parameterType="com.example.start01.dto.OrdersDto"
            useGeneratedKeys="true" keyProperty="orderId" keyColumn="ORDER_ID">
        INSERT INTO orders (room_id, user_id, store_id, room_order, total_price)
        VALUES (
        #{roomId},
        #{userId},
        #{storeId},
        #{roomOrder, typeHandler=com.example.start01.config.JsonNodeTypeHandler, jdbcType=VARCHAR},
        #{totalPrice}
        )
    </insert>

    <!--    삭제 -->
    <delete id="deleteByOrderId" parameterType="int">
        DELETE FROM orders WHERE order_id = #{orderId}
    </delete>


<!--    &lt;!&ndash; 작성 가능한 리뷰 &ndash;&gt;-->
<!--    <select id="selectCanReviewByUserId" resultType="com.example.start01.dto.OrdersDto">-->
<!--        SELECT-->
<!--        o.order_id AS orderId,-->
<!--        o.room_id AS roomId,-->
<!--        o.user_id AS userId,-->
<!--        o.store_id AS storeId,-->
<!--        o.room_order AS roomOrder,-->
<!--        o.total_price AS totalPrice,-->
<!--        o.created_at AS createdAt-->
<!--        FROM orders o-->
<!--        LEFT JOIN review r ON o.order_id = r.order_id AND r.user_id = #{userId}-->
<!--        WHERE o.user_id = #{userId}-->
<!--        AND r.id IS NULL-->
<!--        ORDER BY o.created_at DESC-->
<!--        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY-->
<!--    </select>-->

<!--    &lt;!&ndash; 중복체크용 count &ndash;&gt;-->
<!--    <select id="countCanReviewByUserId" resultType="int">-->
<!--        SELECT COUNT(1) FROM orders o-->
<!--        LEFT JOIN review r ON o.order_id = r.order_id AND o.user_id = r.user_id-->
<!--        WHERE o.user_id = #{userId}-->
<!--            AND r.id IS NULL-->
<!--    </select>-->

    <select id="selectOrdersByRoomId" resultType="com.example.start01.dto.OrdersDto">
        SELECT *
        FROM orders
        WHERE room_id = #{roomId}
    </select>
<!--회원관리검색-->
    <select id="orderSearch" resultType="OrdersDto" parameterType="map">
        SELECT o.*, s.store_name, u.nickname FROM orders o
        Join store s on o.store_id = s.id Join users u on o.user_id = u.id
        <if test="type != null and keyword != null and keyword != ''">
            WHERE
            <choose>
                <when test="type == 'orderId'"> TO_CHAR(o.order_id) LIKE '%' || #{keyword} || '%' </when>
                <when test="type == 'roomId'"> TO_CHAR(o.room_id) LIKE '%' || #{keyword} || '%' </when>
                <when test="type == 'nickname'"> u.nickname LIKE '%' || #{keyword} || '%' </when>
                <when test="type == 'storeName'"> s.store_name LIKE '%' || #{keyword} || '%' </when>
            </choose>
        </if>
    </select>
    <select id="ordersCount" parameterType="int">
        SELECT COUNT(*) FROM ORDERS
    </select>
    <select id="ordersTodayCount" resultType="int" parameterType="map">
        SELECT COUNT(*) FROM orders WHERE created_at BETWEEN #{startDay} AND #{endDay}
    </select>

    <select id="selectAllOrders" resultType="com.example.start01.dto.OrdersDto">
        SELECT order_id, room_id, user_id, store_id, room_order AS roomOrder, total_price, created_at
        FROM orders
        ORDER BY created_at DESC
    </select>

</mapper>